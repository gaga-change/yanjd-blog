# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

union Morph = Category | CategoryAggregator | CategoryConnection | CategoryConnectionCreatedAt | CategoryConnectionCreated_by | CategoryConnectionId | CategoryConnectionName | CategoryConnectionRemark | CategoryConnectionUpdatedAt | CategoryConnectionUpdated_by | CategoryConnection_id | CategoryGroupBy | Post | PostAggregator | PostAggregatorAvg | PostAggregatorMax | PostAggregatorMin | PostAggregatorSum | PostConnection | PostConnectionCategory | PostConnectionCreatedAt | PostConnectionCreated_by | PostConnectionHtml | PostConnectionId | PostConnectionIntro | PostConnectionMarkdown | PostConnectionMdRender | PostConnectionReadTime | PostConnectionReleaseDate | PostConnectionShow | PostConnectionTitle | PostConnectionUpdatedAt | PostConnectionUpdated_by | PostConnection_id | PostGroupBy | Tag | TagAggregator | TagConnection | TagConnectionCreatedAt | TagConnectionCreated_by | TagConnectionId | TagConnectionName | TagConnectionRemark | TagConnectionUpdatedAt | TagConnectionUpdated_by | TagConnection_id | TagGroupBy | UploadFile | UploadFileAggregator | UploadFileAggregatorAvg | UploadFileAggregatorMax | UploadFileAggregatorMin | UploadFileAggregatorSum | UploadFileConnection | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionCreatedAt | UploadFileConnectionCreated_by | UploadFileConnectionExt | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionHeight | UploadFileConnectionId | UploadFileConnectionMime | UploadFileConnectionName | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionSize | UploadFileConnectionUpdatedAt | UploadFileConnectionUpdated_by | UploadFileConnectionUrl | UploadFileConnectionWidth | UploadFileConnection_id | UploadFileGroupBy | UserPermissionsPasswordPayload | UsersPermissionsLoginPayload | UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleAggregator | UsersPermissionsRoleConnection | UsersPermissionsRoleConnectionCreatedAt | UsersPermissionsRoleConnectionCreated_by | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnectionUpdatedAt | UsersPermissionsRoleConnectionUpdated_by | UsersPermissionsRoleConnection_id | UsersPermissionsRoleGroupBy | UsersPermissionsUser | UsersPermissionsUserAggregator | UsersPermissionsUserConnection | UsersPermissionsUserConnectionAvatar | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionCreated_by | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUpdated_by | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnection_id | UsersPermissionsUserGroupBy | createCategoryPayload | createPostPayload | createRolePayload | createTagPayload | createUserPayload | deleteCategoryPayload | deletePostPayload | deleteRolePayload | deleteTagPayload | deleteUserPayload | postRelationRes | updateCategoryPayload | updatePostPayload | updateRolePayload | updateTagPayload | updateUserPayload

type AdminUser {
  id: ID!
  username: String
}

type Category {
  _id: ID!
  createdAt: DateTime!
  created_by: AdminUser
  id: ID!
  name: String
  remark: String
  updatedAt: DateTime!
  updated_by: AdminUser
}

type CategoryAggregator {
  count: Int
  totalCount: Int
}

type CategoryConnection {
  aggregate: CategoryAggregator
  groupBy: CategoryGroupBy
  values: [Category]
}

type CategoryConnectionCreatedAt {
  connection: CategoryConnection
  key: DateTime
}

type CategoryConnectionCreated_by {
  connection: CategoryConnection
  key: ID
}

type CategoryConnectionId {
  connection: CategoryConnection
  key: ID
}

type CategoryConnectionName {
  connection: CategoryConnection
  key: String
}

type CategoryConnectionRemark {
  connection: CategoryConnection
  key: String
}

type CategoryConnectionUpdatedAt {
  connection: CategoryConnection
  key: DateTime
}

type CategoryConnectionUpdated_by {
  connection: CategoryConnection
  key: ID
}

type CategoryConnection_id {
  connection: CategoryConnection
  key: ID
}

type CategoryGroupBy {
  _id: [CategoryConnection_id]
  createdAt: [CategoryConnectionCreatedAt]
  created_by: [CategoryConnectionCreated_by]
  id: [CategoryConnectionId]
  name: [CategoryConnectionName]
  remark: [CategoryConnectionRemark]
  updatedAt: [CategoryConnectionUpdatedAt]
  updated_by: [CategoryConnectionUpdated_by]
}

type Mutation {
  createCategory(input: createCategoryInput): createCategoryPayload
  createPost(input: createPostInput): createPostPayload
  "Create a new role"
  createRole(input: createRoleInput): createRolePayload
  createTag(input: createTagInput): createTagPayload
  "Create a new user"
  createUser(input: createUserInput): createUserPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  deletePost(input: deletePostInput): deletePostPayload
  "Delete an existing role"
  deleteRole(input: deleteRoleInput): deleteRolePayload
  deleteTag(input: deleteTagInput): deleteTagPayload
  "Delete an existing user"
  deleteUser(input: deleteUserInput): deleteUserPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID, source: String): [UploadFile]!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  updatePost(input: updatePostInput): updatePostPayload
  "Update an existing role"
  updateRole(input: updateRoleInput): updateRolePayload
  updateTag(input: updateTagInput): updateTagPayload
  "Update an existing user"
  updateUser(input: updateUserInput): updateUserPayload
  upload(field: String, file: Upload!, ref: String, refId: ID, source: String): UploadFile!
}

type Post {
  _id: ID!
  category: Category
  createdAt: DateTime!
  created_by: AdminUser
  html: String
  id: ID!
  intro: String
  markdown: String
  mdRender: Boolean
  readTime: Int
  releaseDate: DateTime
  show: Boolean
  tags(limit: Int, sort: String, start: Int, where: JSON): [Tag]
  title: String
  updatedAt: DateTime!
  updated_by: AdminUser
}

type PostAggregator {
  avg: PostAggregatorAvg
  count: Int
  max: PostAggregatorMax
  min: PostAggregatorMin
  sum: PostAggregatorSum
  totalCount: Int
}

type PostAggregatorAvg {
  readTime: Float
}

type PostAggregatorMax {
  readTime: Float
}

type PostAggregatorMin {
  readTime: Float
}

type PostAggregatorSum {
  readTime: Float
}

type PostConnection {
  aggregate: PostAggregator
  groupBy: PostGroupBy
  values: [Post]
}

type PostConnectionCategory {
  connection: PostConnection
  key: ID
}

type PostConnectionCreatedAt {
  connection: PostConnection
  key: DateTime
}

type PostConnectionCreated_by {
  connection: PostConnection
  key: ID
}

type PostConnectionHtml {
  connection: PostConnection
  key: String
}

type PostConnectionId {
  connection: PostConnection
  key: ID
}

type PostConnectionIntro {
  connection: PostConnection
  key: String
}

type PostConnectionMarkdown {
  connection: PostConnection
  key: String
}

type PostConnectionMdRender {
  connection: PostConnection
  key: Boolean
}

type PostConnectionReadTime {
  connection: PostConnection
  key: Int
}

type PostConnectionReleaseDate {
  connection: PostConnection
  key: DateTime
}

type PostConnectionShow {
  connection: PostConnection
  key: Boolean
}

type PostConnectionTitle {
  connection: PostConnection
  key: String
}

type PostConnectionUpdatedAt {
  connection: PostConnection
  key: DateTime
}

type PostConnectionUpdated_by {
  connection: PostConnection
  key: ID
}

type PostConnection_id {
  connection: PostConnection
  key: ID
}

type PostGroupBy {
  _id: [PostConnection_id]
  category: [PostConnectionCategory]
  createdAt: [PostConnectionCreatedAt]
  created_by: [PostConnectionCreated_by]
  html: [PostConnectionHtml]
  id: [PostConnectionId]
  intro: [PostConnectionIntro]
  markdown: [PostConnectionMarkdown]
  mdRender: [PostConnectionMdRender]
  readTime: [PostConnectionReadTime]
  releaseDate: [PostConnectionReleaseDate]
  show: [PostConnectionShow]
  title: [PostConnectionTitle]
  updatedAt: [PostConnectionUpdatedAt]
  updated_by: [PostConnectionUpdated_by]
}

type Query {
  categories(limit: Int, sort: String, start: Int, where: JSON): [Category]
  categoriesConnection(limit: Int, sort: String, start: Int, where: JSON): CategoryConnection
  category(id: ID!): Category
  files(limit: Int, sort: String, start: Int, where: JSON): [UploadFile]
  filesConnection(limit: Int, sort: String, start: Int, where: JSON): UploadFileConnection
  me: UsersPermissionsMe
  post(id: ID!): Post
  postRelation: [postRelationRes]
  posts(limit: Int, sort: String, start: Int, where: JSON): [Post]
  postsConnection(limit: Int, sort: String, start: Int, where: JSON): PostConnection
  role(id: ID!): UsersPermissionsRole
  "Retrieve all the existing roles. You can't apply filters on this query."
  roles(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsRoleConnection
  tag(id: ID!): Tag
  tags(limit: Int, sort: String, start: Int, where: JSON): [Tag]
  tagsConnection(limit: Int, sort: String, start: Int, where: JSON): TagConnection
  user(id: ID!): UsersPermissionsUser
  users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsUserConnection
}

type Tag {
  _id: ID!
  createdAt: DateTime!
  created_by: AdminUser
  id: ID!
  name: String
  remark: String
  updatedAt: DateTime!
  updated_by: AdminUser
}

type TagAggregator {
  count: Int
  totalCount: Int
}

type TagConnection {
  aggregate: TagAggregator
  groupBy: TagGroupBy
  values: [Tag]
}

type TagConnectionCreatedAt {
  connection: TagConnection
  key: DateTime
}

type TagConnectionCreated_by {
  connection: TagConnection
  key: ID
}

type TagConnectionId {
  connection: TagConnection
  key: ID
}

type TagConnectionName {
  connection: TagConnection
  key: String
}

type TagConnectionRemark {
  connection: TagConnection
  key: String
}

type TagConnectionUpdatedAt {
  connection: TagConnection
  key: DateTime
}

type TagConnectionUpdated_by {
  connection: TagConnection
  key: ID
}

type TagConnection_id {
  connection: TagConnection
  key: ID
}

type TagGroupBy {
  _id: [TagConnection_id]
  createdAt: [TagConnectionCreatedAt]
  created_by: [TagConnectionCreated_by]
  id: [TagConnectionId]
  name: [TagConnectionName]
  remark: [TagConnectionRemark]
  updatedAt: [TagConnectionUpdatedAt]
  updated_by: [TagConnectionUpdated_by]
}

type UploadFile {
  _id: ID!
  alternativeText: String
  caption: String
  createdAt: DateTime!
  created_by: AdminUser
  ext: String
  formats: JSON
  hash: String!
  height: Int
  id: ID!
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(limit: Int, sort: String, start: Int, where: JSON): [Morph]
  size: Float!
  updatedAt: DateTime!
  updated_by: AdminUser
  url: String!
  width: Int
}

type UploadFileAggregator {
  avg: UploadFileAggregatorAvg
  count: Int
  max: UploadFileAggregatorMax
  min: UploadFileAggregatorMin
  sum: UploadFileAggregatorSum
  totalCount: Int
}

type UploadFileAggregatorAvg {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorMax {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorMin {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorSum {
  height: Float
  size: Float
  width: Float
}

type UploadFileConnection {
  aggregate: UploadFileAggregator
  groupBy: UploadFileGroupBy
  values: [UploadFile]
}

type UploadFileConnectionAlternativeText {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionCaption {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionCreatedAt {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionCreated_by {
  connection: UploadFileConnection
  key: ID
}

type UploadFileConnectionExt {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionFormats {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionHash {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionHeight {
  connection: UploadFileConnection
  key: Int
}

type UploadFileConnectionId {
  connection: UploadFileConnection
  key: ID
}

type UploadFileConnectionMime {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionName {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionPreviewUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider_metadata {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionSize {
  connection: UploadFileConnection
  key: Float
}

type UploadFileConnectionUpdatedAt {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionUpdated_by {
  connection: UploadFileConnection
  key: ID
}

type UploadFileConnectionUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionWidth {
  connection: UploadFileConnection
  key: Int
}

type UploadFileConnection_id {
  connection: UploadFileConnection
  key: ID
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  createdAt: [UploadFileConnectionCreatedAt]
  created_by: [UploadFileConnectionCreated_by]
  ext: [UploadFileConnectionExt]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  height: [UploadFileConnectionHeight]
  id: [UploadFileConnectionId]
  mime: [UploadFileConnectionMime]
  name: [UploadFileConnectionName]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
  size: [UploadFileConnectionSize]
  updatedAt: [UploadFileConnectionUpdatedAt]
  updated_by: [UploadFileConnectionUpdated_by]
  url: [UploadFileConnectionUrl]
  width: [UploadFileConnectionWidth]
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  avatar: String
  blocked: Boolean
  confirmed: Boolean
  email: String!
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  action: String!
  controller: String!
  createdAt: DateTime!
  created_by: AdminUser
  enabled: Boolean!
  id: ID!
  policy: String
  role: UsersPermissionsRole
  type: String!
  updatedAt: DateTime!
  updated_by: AdminUser
}

type UsersPermissionsRole {
  _id: ID!
  createdAt: DateTime!
  created_by: AdminUser
  description: String
  id: ID!
  name: String!
  permissions(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsPermission]
  type: String
  updatedAt: DateTime!
  updated_by: AdminUser
  users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  aggregate: UsersPermissionsRoleAggregator
  groupBy: UsersPermissionsRoleGroupBy
  values: [UsersPermissionsRole]
}

type UsersPermissionsRoleConnectionCreatedAt {
  connection: UsersPermissionsRoleConnection
  key: DateTime
}

type UsersPermissionsRoleConnectionCreated_by {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleConnectionDescription {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionId {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleConnectionName {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionType {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionUpdatedAt {
  connection: UsersPermissionsRoleConnection
  key: DateTime
}

type UsersPermissionsRoleConnectionUpdated_by {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleConnection_id {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  createdAt: [UsersPermissionsRoleConnectionCreatedAt]
  created_by: [UsersPermissionsRoleConnectionCreated_by]
  description: [UsersPermissionsRoleConnectionDescription]
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  type: [UsersPermissionsRoleConnectionType]
  updatedAt: [UsersPermissionsRoleConnectionUpdatedAt]
  updated_by: [UsersPermissionsRoleConnectionUpdated_by]
}

type UsersPermissionsUser {
  _id: ID!
  avatar: String
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime!
  created_by: AdminUser
  email: String!
  id: ID!
  provider: String
  role: UsersPermissionsRole
  updatedAt: DateTime!
  updated_by: AdminUser
  username: String!
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  aggregate: UsersPermissionsUserAggregator
  groupBy: UsersPermissionsUserGroupBy
  values: [UsersPermissionsUser]
}

type UsersPermissionsUserConnectionAvatar {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionBlocked {
  connection: UsersPermissionsUserConnection
  key: Boolean
}

type UsersPermissionsUserConnectionConfirmed {
  connection: UsersPermissionsUserConnection
  key: Boolean
}

type UsersPermissionsUserConnectionCreatedAt {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionCreated_by {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionEmail {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionId {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionProvider {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionRole {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionUpdatedAt {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionUpdated_by {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionUsername {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnection_id {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  avatar: [UsersPermissionsUserConnectionAvatar]
  blocked: [UsersPermissionsUserConnectionBlocked]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  created_by: [UsersPermissionsUserConnectionCreated_by]
  email: [UsersPermissionsUserConnectionEmail]
  id: [UsersPermissionsUserConnectionId]
  provider: [UsersPermissionsUserConnectionProvider]
  role: [UsersPermissionsUserConnectionRole]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  updated_by: [UsersPermissionsUserConnectionUpdated_by]
  username: [UsersPermissionsUserConnectionUsername]
}

type createCategoryPayload {
  category: Category
}

type createPostPayload {
  post: Post
}

type createRolePayload {
  role: UsersPermissionsRole
}

type createTagPayload {
  tag: Tag
}

type createUserPayload {
  user: UsersPermissionsUser
}

type deleteCategoryPayload {
  category: Category
}

type deletePostPayload {
  post: Post
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type deleteTagPayload {
  tag: Tag
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type postRelationRes {
  category: ID
  id: ID
  tags: [ID]!
}

type updateCategoryPayload {
  category: Category
}

type updatePostPayload {
  post: Post
}

type updateRolePayload {
  role: UsersPermissionsRole
}

type updateTagPayload {
  tag: Tag
}

type updateUserPayload {
  user: UsersPermissionsUser
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

input CategoryInput {
  created_by: ID
  name: String
  remark: String
  updated_by: ID
}

input FileInput {
  alternativeText: String
  caption: String
  created_by: ID
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  size: Float!
  updated_by: ID
  url: String!
  width: Int
}

input InputID {
  id: ID!
}

input PostInput {
  category: ID
  created_by: ID
  html: String
  intro: String
  markdown: String
  mdRender: Boolean
  readTime: Int
  releaseDate: DateTime
  show: Boolean
  tags: [ID]
  title: String
  updated_by: ID
}

input RoleInput {
  created_by: ID
  description: String
  name: String!
  permissions: [ID]
  type: String
  updated_by: ID
  users: [ID]
}

input TagInput {
  created_by: ID
  name: String
  remark: String
  updated_by: ID
}

input UserInput {
  avatar: String
  blocked: Boolean
  confirmed: Boolean
  created_by: ID
  email: String!
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  updated_by: ID
  username: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

input createCategoryInput {
  data: CategoryInput
}

input createPostInput {
  data: PostInput
}

input createRoleInput {
  data: RoleInput
}

input createTagInput {
  data: TagInput
}

input createUserInput {
  data: UserInput
}

input deleteCategoryInput {
  where: InputID
}

input deletePostInput {
  where: InputID
}

input deleteRoleInput {
  where: InputID
}

input deleteTagInput {
  where: InputID
}

input deleteUserInput {
  where: InputID
}

input editCategoryInput {
  created_by: ID
  name: String
  remark: String
  updated_by: ID
}

input editFileInput {
  alternativeText: String
  caption: String
  created_by: ID
  ext: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  size: Float
  updated_by: ID
  url: String
  width: Int
}

input editPostInput {
  category: ID
  created_by: ID
  html: String
  intro: String
  markdown: String
  mdRender: Boolean
  readTime: Int
  releaseDate: DateTime
  show: Boolean
  tags: [ID]
  title: String
  updated_by: ID
}

input editRoleInput {
  created_by: ID
  description: String
  name: String
  permissions: [ID]
  type: String
  updated_by: ID
  users: [ID]
}

input editTagInput {
  created_by: ID
  name: String
  remark: String
  updated_by: ID
}

input editUserInput {
  avatar: String
  blocked: Boolean
  confirmed: Boolean
  created_by: ID
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  updated_by: ID
  username: String
}

input updateCategoryInput {
  data: editCategoryInput
  where: InputID
}

input updatePostInput {
  data: editPostInput
  where: InputID
}

input updateRoleInput {
  data: editRoleInput
  where: InputID
}

input updateTagInput {
  data: editTagInput
  where: InputID
}

input updateUserInput {
  data: editUserInput
  where: InputID
}


"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"The `Upload` scalar type represents a file upload."
scalar Upload

"A time string with format: HH:mm:ss.SSS"
scalar Time

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `Long` scalar type represents 52-bit integers"
scalar Long
