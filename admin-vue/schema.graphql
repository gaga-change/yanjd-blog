# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: rootQuery
  mutation: rootMutation
}

type AggregateType {
  count: Int
}

type Category {
  createdAt: Float
  createdBy: String
  id: ID
  name: String
  remark: String
  updatedAt: Float
  updatedBy: String
}

type CategoryList {
  aggregate: AggregateType
  list: [Category]
}

type CategoryPro {
  createdAt: Float
  createdBy: String
  id: ID
  name: String
  postCount: String
  remark: String
  updatedAt: Float
  updatedBy: String
}

type CategoryProList {
  aggregate: AggregateType
  list: [CategoryPro]
}

type Me {
  avatar: String
  email: String
  id: ID
  name: String
}

type Permission {
  createdAt: Float
  createdBy: String
  id: ID
  name: String
  remark: String
  type: Int
  updatedAt: Float
  updatedBy: String
}

type PermissionList {
  aggregate: AggregateType
  list: [Permission]
}

type PermissionPro {
  createdAt: Float
  createdBy: String
  id: ID
  name: String
  remark: String
  type: Int
  updatedAt: Float
  updatedBy: String
}

type PermissionProList {
  aggregate: AggregateType
  list: [PermissionPro]
}

type Post {
  category: String
  createdAt: Float
  createdBy: String
  html: String
  id: ID
  intro: String
  markdown: String
  readTime: Int
  releaseDate: Float
  status: Int
  title: String
  updatedAt: Float
  updatedBy: String
}

type PostList {
  aggregate: AggregateType
  list: [Post]
}

type PostPro {
  category: String
  createdAt: Float
  createdBy: String
  html: String
  id: ID
  intro: String
  markdown: String
  readTime: Int
  releaseDate: Float
  status: Int
  tags: String
  title: String
  updatedAt: Float
  updatedBy: String
}

type PostProList {
  aggregate: AggregateType
  list: [PostPro]
}

type Role {
  createdAt: Float
  createdBy: String
  id: ID
  name: String
  remark: String
  updatedAt: Float
  updatedBy: String
}

type RoleList {
  aggregate: AggregateType
  list: [Role]
}

type RolePro {
  createdAt: Float
  createdBy: String
  id: ID
  name: String
  permissions: String
  remark: String
  updatedAt: Float
  updatedBy: String
}

type RoleProList {
  aggregate: AggregateType
  list: [RolePro]
}

type Tag {
  createdAt: Float
  createdBy: String
  id: ID
  name: String
  remark: String
  updatedAt: Float
  updatedBy: String
}

type TagList {
  aggregate: AggregateType
  list: [Tag]
}

type TagPostCount {
  createdAt: Float
  createdBy: String
  id: ID
  name: String
  postCount: String
  remark: String
  updatedAt: Float
  updatedBy: String
}

type TagPostCountList {
  aggregate: AggregateType
  list: [TagPostCount]
}

type TagPro {
  createdAt: Float
  createdBy: String
  id: ID
  name: String
  postCount: String
  remark: String
  updatedAt: Float
  updatedBy: String
}

type TagProList {
  aggregate: AggregateType
  list: [TagPro]
}

type User {
  avatar: String
  createdAt: Float
  createdBy: String
  email: String
  id: ID
  name: String
  password: String
  remark: String
  salt: String
  updatedAt: Float
  updatedBy: String
}

type UserList {
  aggregate: AggregateType
  list: [User]
}

type UserPro {
  avatar: String
  createdAt: Float
  createdBy: String
  email: String
  id: ID
  name: String
  password: String
  remark: String
  roles: String
  salt: String
  updatedAt: Float
  updatedBy: String
}

type UserProList {
  aggregate: AggregateType
  list: [UserPro]
}

type loginPayload {
  jwt: String
  user: Me
}

type logoutPayload {
  success: Boolean
}

type registerPayload {
  success: Boolean
}

type rootMutation {
  createCategory(data: categoryInput!): Category
  createPermission(data: permissionInput!): Permission
  createPost(data: postInput!): Post
  createRole(data: roleInput!): Role
  createTag(data: tagInput!): Tag
  createUser(data: userInput!): User
  deleteCategory(id: ID!): Boolean
  deletePermission(id: ID!): Boolean
  deletePost(id: ID!): Boolean
  deleteRole(id: ID!): Boolean
  deleteTag(id: ID!): Boolean
  deleteUser(id: ID!): Boolean
  login(input: loginInput): loginPayload
  logout: logoutPayload
  register(input: registerInput): registerPayload
  updateCategory(data: categoryInput!, id: ID!): Boolean
  updateEmail(input: updateEmailInput): updateEmailPayload
  updateName(input: updateNameInput): updateNamePayload
  updatePassword(input: updatePasswordInput): updatePasswordPayload
  updatePermission(data: permissionInput!, id: ID!): Boolean
  updatePost(data: postInput!, id: ID!): Boolean
  updateRole(data: roleInput!, id: ID!): Boolean
  updateTag(data: tagInput!, id: ID!): Boolean
  updateUser(data: userInput!, id: ID!): Boolean
  userResetPassword(id: String!, pwd: String!): Boolean
}

type rootQuery {
  categories(limit: Int, sort: String, start: Int, where: JSON): [Category]
  category(id: ID!): Category
  categoryList(limit: Int, sort: String, start: Int, where: JSON): CategoryList
  categoryPro(id: ID!): CategoryPro
  categoryProList(limit: Int, sort: String, start: Int, where: JSON): CategoryProList
  categoryPros(limit: Int, sort: String, start: Int, where: JSON): [CategoryPro]
  me: Me
  permission(id: ID!): Permission
  permissionList(limit: Int, sort: String, start: Int, where: JSON): PermissionList
  permissionPro(id: ID!): PermissionPro
  permissionProList(limit: Int, sort: String, start: Int, where: JSON): PermissionProList
  permissionPros(limit: Int, sort: String, start: Int, where: JSON): [PermissionPro]
  permissions(limit: Int, sort: String, start: Int, where: JSON): [Permission]
  post(id: ID!): Post
  postList(limit: Int, sort: String, start: Int, where: JSON): PostList
  postPro(id: ID!): PostPro
  postProList(limit: Int, sort: String, start: Int, where: JSON): PostProList
  postPros(limit: Int, sort: String, start: Int, where: JSON): [PostPro]
  posts(limit: Int, sort: String, start: Int, where: JSON): [Post]
  role(id: ID!): Role
  roleList(limit: Int, sort: String, start: Int, where: JSON): RoleList
  rolePro(id: ID!): RolePro
  roleProList(limit: Int, sort: String, start: Int, where: JSON): RoleProList
  rolePros(limit: Int, sort: String, start: Int, where: JSON): [RolePro]
  roles(limit: Int, sort: String, start: Int, where: JSON): [Role]
  tag(id: ID!): Tag
  tagList(limit: Int, sort: String, start: Int, where: JSON): TagList
  tagPostCount(id: ID!): TagPostCount
  tagPostCountList(limit: Int, sort: String, start: Int, where: JSON): TagPostCountList
  tagPostCounts(limit: Int, sort: String, start: Int, where: JSON): [TagPostCount]
  tagPro(id: ID!): TagPro
  tagProList(limit: Int, sort: String, start: Int, where: JSON): TagProList
  tagPros(limit: Int, sort: String, start: Int, where: JSON): [TagPro]
  tags(limit: Int, sort: String, start: Int, where: JSON): [Tag]
  user(id: ID!): User
  userList(limit: Int, sort: String, start: Int, where: JSON): UserList
  userPro(id: ID!): UserPro
  userProList(limit: Int, sort: String, start: Int, where: JSON): UserProList
  userPros(limit: Int, sort: String, start: Int, where: JSON): [UserPro]
  users(limit: Int, sort: String, start: Int, where: JSON): [User]
}

type updateEmailPayload {
  success: Boolean
}

type updateNamePayload {
  success: Boolean
}

type updatePasswordPayload {
  success: Boolean
}

input categoryInput {
  name: String
  remark: String
}

input loginInput {
  account: String
  password: String
}

input permissionInput {
  name: String
  remark: String
  roles: [ID]
  type: Int
}

input postInput {
  category: String
  html: String
  intro: String
  markdown: String
  readTime: Int
  releaseDate: Float
  status: Int
  tags: [ID]
  title: String
}

input registerInput {
  email: String
  name: String
  password: String
}

input roleInput {
  name: String
  permissions: [ID]
  remark: String
  users: [ID]
}

input tagInput {
  name: String
  posts: [ID]
  remark: String
}

input updateEmailInput {
  email: String
}

input updateNameInput {
  name: String
}

input updatePasswordInput {
  password: String
}

input userInput {
  avatar: String
  email: String
  name: String
  password: String
  remark: String
  roles: [ID]
  salt: String
}


"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON
