# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type Category {
  createdAt: Float
  createdBy: User
  id: String
  name: String
  remark: String
  updatedAt: Float
  updatedBy: User
}

type CategoryAggregator {
  count: Int
}

type CategoryConnection {
  aggregate: CategoryAggregator
  values: [Category]
}

type CategoryPro {
  createdAt: Float
  createdBy: User
  id: String
  name: String
  postCount: Int
  remark: String
  updatedAt: Float
  updatedBy: User
}

type CategoryProAggregator {
  count: Int
}

type CategoryProConnection {
  aggregate: CategoryProAggregator
  values: [CategoryPro]
}

type Me {
  avatar: String
  email: String
  id: String
  role: MeRole
  username: String
}

type MeRole {
  name: String
}

type Mutation {
  createCategory(input: createCategoryInput): createCategoryPayload
  createPermission(input: createPermissionInput): createPermissionPayload
  createPost(input: createPostInput): createPostPayload
  createRole(input: createRoleInput): createRolePayload
  createTag(input: createTagInput): createTagPayload
  createUser(input: createUserInput): createUserPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  deletePermission(input: deletePermissionInput): deletePermissionPayload
  deletePost(input: deletePostInput): deletePostPayload
  deleteRole(input: deleteRoleInput): deleteRolePayload
  deleteTag(input: deleteTagInput): deleteTagPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  login(input: UsersPermissionsLoginInput): loginPayload
  logout: logoutPayload
  register(input: registerInput): registerPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  updateEmail(input: updateEmailInput): updateEmailPayload
  updateName(input: updateNameInput): updateNamePayload
  updatePassword(input: updatePasswordInput): updatePasswordPayload
  updatePermission(input: updatePermissionInput): updatePermissionPayload
  updatePost(input: updatePostInput): updatePostPayload
  updateRole(input: updateRoleInput): updateRolePayload
  updateTag(input: updateTagInput): updateTagPayload
  updateUser(input: updateUserInput): updateUserPayload
  userResetPassword(id: ID, pwd: String): Boolean
}

type Permission {
  createdAt: Float
  createdBy: User
  id: String
  name: String
  remark: String
  roles(limit: Int, sort: String, start: Int, where: JSON): [Role]
  type: Int
  updatedAt: Float
  updatedBy: User
}

type PermissionAggregator {
  count: Int
}

type PermissionConnection {
  aggregate: PermissionAggregator
  values: [Permission]
}

type Post {
  category: Category
  createdAt: Float
  createdBy: User
  html: String
  id: String
  intro: String
  markdown: String
  readTime: Int
  releaseDate: Float
  status: Int
  tags(limit: Int, sort: String, start: Int, where: JSON): [Tag]
  title: String
  updatedAt: Float
  updatedBy: User
}

type PostAggregator {
  count: Int
}

type PostConnection {
  aggregate: PostAggregator
  values: [Post]
}

type PostPro {
  category: String
  createdAt: Float
  createdBy: User
  html: String
  id: String
  intro: String
  markdown: String
  readTime: Int
  releaseDate: Float
  status: Int
  tags: [String]
  title: String
  updatedAt: Float
  updatedBy: User
}

type PostProAggregator {
  count: Int
}

type PostProConnection {
  aggregate: PostProAggregator
  values: [PostPro]
}

type Query {
  categories(limit: Int, sort: String, start: Int, where: JSON): [Category]
  categoriesConnection(limit: Int, sort: String, start: Int, where: JSON): CategoryConnection
  category(id: ID!): Category
  categoryProConnection(limit: Int, sort: String, start: Int, where: JSON): CategoryProConnection
  me: Me
  permission(id: ID!): Permission
  permissions(limit: Int, sort: String, start: Int, where: JSON): [Permission]
  permissionsConnection(limit: Int, sort: String, start: Int, where: JSON): PermissionConnection
  post(id: ID!): Post
  postPro: PostPro
  posts(limit: Int, sort: String, start: Int, where: JSON): [Post]
  postsConnection(limit: Int, sort: String, start: Int, where: JSON): PostConnection
  postsProConnection(limit: Int, sort: String, start: Int, where: JSON): PostProConnection
  role(id: ID!): Role
  roleProConnection(limit: Int, sort: String, start: Int, where: JSON): RoleProConnection
  roles(limit: Int, sort: String, start: Int, where: JSON): [Role]
  rolesConnection(limit: Int, sort: String, start: Int, where: JSON): RoleConnection
  tag(id: ID!): Tag
  tags(limit: Int, sort: String, start: Int, where: JSON): [Tag]
  tagsConnection(limit: Int, sort: String, start: Int, where: JSON): TagConnection
  tagsProConnection(limit: Int, sort: String, start: Int, where: JSON): TagProConnection
  user(id: ID!): User
  userProConnection(limit: Int, sort: String, start: Int, where: JSON): UserProConnection
  users(limit: Int, sort: String, start: Int, where: JSON): [User]
  usersConnection(limit: Int, sort: String, start: Int, where: JSON): UserConnection
}

type Role {
  createdAt: Float
  createdBy: User
  id: String
  name: String
  permissions(limit: Int, sort: String, start: Int, where: JSON): [Permission]
  remark: String
  updatedAt: Float
  updatedBy: User
  users(limit: Int, sort: String, start: Int, where: JSON): [User]
}

type RoleAggregator {
  count: Int
}

type RoleConnection {
  aggregate: RoleAggregator
  values: [Role]
}

type RolePro {
  createdAt: Float
  createdBy: User
  id: String
  name: String
  permissions: [String]
  remark: String
  updatedAt: Float
  updatedBy: User
}

type RoleProAggregator {
  count: Int
}

type RoleProConnection {
  aggregate: RoleProAggregator
  values: [RolePro]
}

type Tag {
  createdAt: Float
  createdBy: User
  id: String
  name: String
  posts(limit: Int, sort: String, start: Int, where: JSON): [Post]
  remark: String
  updatedAt: Float
  updatedBy: User
}

type TagAggregator {
  count: Int
}

type TagConnection {
  aggregate: TagAggregator
  values: [Tag]
}

type TagPro {
  createdAt: Float
  createdBy: User
  id: String
  name: String
  postCount: Int
  posts(limit: Int, sort: String, start: Int, where: JSON): [Post]
  remark: String
  updatedAt: Float
  updatedBy: User
}

type TagProConnection {
  aggregate: TagAggregator
  values: [TagPro]
}

type User {
  avatar: String
  createdAt: Float
  createdBy: User
  email: String
  id: String
  name: String
  password: String
  remark: String
  roles(limit: Int, sort: String, start: Int, where: JSON): [Role]
  salt: String
  updatedAt: Float
  updatedBy: User
}

type UserAggregator {
  count: Int
}

type UserConnection {
  aggregate: UserAggregator
  values: [User]
}

type UserPro {
  avatar: String
  createdAt: Float
  createdBy: User
  email: String
  id: String
  name: String
  password: String
  remark: String
  roles: [String]
  salt: String
  updatedAt: Float
  updatedBy: User
}

type UserProAggregator {
  count: Int
}

type UserProConnection {
  aggregate: UserProAggregator
  values: [UserPro]
}

type createCategoryPayload {
  category: Category
}

type createPermissionPayload {
  permission: Permission
}

type createPostPayload {
  post: Post
}

type createRolePayload {
  role: Role
}

type createTagPayload {
  tag: Tag
}

type createUserPayload {
  user: User
}

type deleteCategoryPayload {
  category: Category
}

type deletePermissionPayload {
  permission: Permission
}

type deletePostPayload {
  post: Post
}

type deleteRolePayload {
  role: Role
}

type deleteTagPayload {
  tag: Tag
}

type deleteUserPayload {
  user: User
}

type loginPayload {
  jwt: String
  user: Me
}

type logoutPayload {
  success: Boolean
}

type registerPayload {
  success: Boolean
}

type updateCategoryPayload {
  category: Category
}

type updateEmailPayload {
  success: Boolean
}

type updateNamePayload {
  success: Boolean
}

type updatePasswordPayload {
  success: Boolean
}

type updatePermissionPayload {
  permission: Permission
}

type updatePostPayload {
  post: Post
}

type updateRolePayload {
  role: Role
}

type updateTagPayload {
  tag: Tag
}

type updateUserPayload {
  user: User
}

input CategoryInput {
  createdAt: Float
  createdBy: String
  name: String
  remark: String
  updatedAt: Float
  updatedBy: String
}

input InputID {
  id: ID!
}

input PermissionInput {
  createdAt: Float
  createdBy: String
  name: String
  remark: String
  roles: [String]
  type: Int
  updatedAt: Float
  updatedBy: String
}

input PostInput {
  category: String
  createdAt: Float
  createdBy: String
  html: String
  intro: String
  markdown: String
  readTime: Int
  releaseDate: Float
  status: Int
  tags: [String]
  title: String
  updatedAt: Float
  updatedBy: String
}

input RoleInput {
  createdAt: Float
  createdBy: String
  name: String
  permissions: [String]
  remark: String
  updatedAt: Float
  updatedBy: String
  users: [String]
}

input TagInput {
  createdAt: Float
  createdBy: String
  name: String
  posts: [String]
  remark: String
  updatedAt: Float
  updatedBy: String
}

input UserInput {
  avatar: String
  createdAt: Float
  createdBy: String
  email: String
  name: String
  password: String
  remark: String
  roles: [String]
  salt: String
  updatedAt: Float
  updatedBy: String
}

input UsersPermissionsLoginInput {
  identifier: String
  password: String
}

input createCategoryInput {
  data: CategoryInput
}

input createPermissionInput {
  data: PermissionInput
}

input createPostInput {
  data: PostInput
}

input createRoleInput {
  data: RoleInput
}

input createTagInput {
  data: TagInput
}

input createUserInput {
  data: UserInput
}

input deleteCategoryInput {
  where: InputID
}

input deletePermissionInput {
  where: InputID
}

input deletePostInput {
  where: InputID
}

input deleteRoleInput {
  where: InputID
}

input deleteTagInput {
  where: InputID
}

input deleteUserInput {
  where: InputID
}

input editCategoryInput {
  createdAt: Float
  createdBy: String
  name: String
  remark: String
  updatedAt: Float
  updatedBy: String
}

input editPermissionInput {
  createdAt: Float
  createdBy: String
  name: String
  remark: String
  roles: [String]
  type: Int
  updatedAt: Float
  updatedBy: String
}

input editPostInput {
  category: String
  createdAt: Float
  createdBy: String
  html: String
  intro: String
  markdown: String
  readTime: Int
  releaseDate: Float
  status: Int
  tags: [String]
  title: String
  updatedAt: Float
  updatedBy: String
}

input editRoleInput {
  createdAt: Float
  createdBy: String
  name: String
  permissions: [String]
  remark: String
  updatedAt: Float
  updatedBy: String
  users: [String]
}

input editTagInput {
  createdAt: Float
  createdBy: String
  name: String
  posts: [String]
  remark: String
  updatedAt: Float
  updatedBy: String
}

input editUserInput {
  avatar: String
  createdAt: Float
  createdBy: String
  email: String
  name: String
  password: String
  remark: String
  roles: [String]
  salt: String
  updatedAt: Float
  updatedBy: String
}

input loginInput {
  account: String
  password: String
}

input registerInput {
  email: String
  name: String
  password: String
}

input updateCategoryInput {
  data: editCategoryInput
  where: InputID
}

input updateEmailInput {
  email: String
}

input updateNameInput {
  name: String
}

input updatePasswordInput {
  password: String
}

input updatePermissionInput {
  data: editPermissionInput
  where: InputID
}

input updatePostInput {
  data: editPostInput
  where: InputID
}

input updateRoleInput {
  data: editRoleInput
  where: InputID
}

input updateTagInput {
  data: editTagInput
  where: InputID
}

input updateUserInput {
  data: editUserInput
  where: InputID
}


scalar JSON
